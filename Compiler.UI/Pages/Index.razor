@page "/"
@using Compiler.API.Compiler
@using System.Net
@using Compiler.Application.Compiler.RunTests

@inject HttpClient _httpClient
@inject Monaco _monaco

<PageTitle>Index</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <div class="task">
                <div class="task__title">Описание задачи</div>
                <div class="task__content">
                    Давно выяснено, что при оценке дизайна и композиции читаемый текст мешает сосредоточиться. Lorem Ipsum используют потому, что тот обеспечивает более или менее стандартное заполнение шаблона, а также реальное распределение букв и пробелов в абзацах, которое не получается при простой дубликации "Здесь ваш текст.. Здесь ваш текст.. Здесь ваш текст.." Многие программы электронной вёрстки и редакторы HTML используют Lorem Ipsum в качестве текста по умолчанию, так что поиск по ключевым словам
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="text-editors">

                <div class="text-editor">
                    <div class="text-editor__title">Solution</div>
                    <div class="text-editor__content">
                        <div id="@_mainClassTextEditorId"></div>
                    </div>

                </div>

                <div class="text-editor">
                    <div class="text-editor__title">Sample Tests</div>
                    <div class="text-editor__content">
                        <div id="@_testClassTextEditorId"></div>
                    </div>

                </div>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col justify-content-end pt-2 pb-2">
            <button class="btn btn-primary" @onclick="RunTestAsync">Run Tests</button>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="compilation-result">
                @if (_compiledInformation != null)
                {
                    if (_compiledInformation.Errors != null && _compiledInformation.Errors.Any())
                    {
                        @foreach (var error in _compiledInformation.Errors)
                        {
                            <div>
                                @error
                            </div>
                        }
                    }
                    if (_compiledInformation.TestResult != null && _compiledInformation.TestResult.Any())
                    {
                        @foreach (var testResult in _compiledInformation.TestResult!)
                        {
                            <div>
                                @testResult.TestName - @(testResult.IsPassed ? "Passed" : "Failed")

                                @if (!testResult.IsPassed)
                                {
                                    @testResult.ErrorValue;
                                }
                                <hr>
                            </div>
                        }
                    }
                }
            </div>
        </div>
    </div>

</div>





@code {

    private const string _mainClassTextEditorId = "main-class-text-edittor";
    private const string _testClassTextEditorId = "test-class-text-edittor";

    private CompiledInformationDto? _compiledInformation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _monaco.InitializeAsync(_mainClassTextEditorId, Constants.MainClassText, "csharp");
            await _monaco.InitializeAsync(_testClassTextEditorId, Constants.TestClassText, "csharp");
        }

        await base.OnAfterRenderAsync(firstRender);

    }

    private async Task RunTestAsync()
    {
        _compiledInformation = await SendRunTestAsync();
    }

    private async Task<CompiledInformationDto> SendRunTestAsync()
    {
        string mainClassText = await _monaco.GetCodeAsync(_mainClassTextEditorId);
        string testClassText = await _monaco.GetCodeAsync(_testClassTextEditorId);

        RunAllTestsRequest request = new()
            {
                MainClassText = mainClassText,
                TestClassText = testClassText
            };

        var response = await _httpClient.PostAsJsonAsync("api/Compiler/RunAllTests", request);

        try
        {
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<CompiledInformationDto>() ?? new CompiledInformationDto();
            }
            else
            {
                var message = await response.Content.ReadAsStringAsync();
                throw new Exception($"Http status code: {response.StatusCode} Message: {message}");
            }
        }

        catch (Exception)
        {
            throw;
        }

    }
}
