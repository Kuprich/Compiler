@page "/"




@inject HttpClient _httpClient
@inject Monaco _monaco
@inject Sender _sender

<PageTitle>Index</PageTitle>

<div class="container-fluid">
    <div class="row">
        <select>
            <option selected disabled>Выберите задачу:</option>

            @if (_practiceHeadings != null)
            {
                @foreach (var practiceHeading in _practiceHeadings)
                {
                    <option>@practiceHeading.Heading</option>
                }
            }

        </select>
    </div>
    <div class="row">
        <div class="col-6">
            <div class="practice">
                <div class="practice__heading">Описание задачи</div>
                <div class="practice__content">
                    Давно выяснено, что при оценке дизайна и композиции читаемый текст мешает сосредоточиться. Lorem Ipsum используют потому, что тот обеспечивает более или менее стандартное заполнение шаблона, а также реальное распределение букв и пробелов в абзацах, которое не получается при простой дубликации "Здесь ваш текст.. Здесь ваш текст.. Здесь ваш текст.." Многие программы электронной вёрстки и редакторы HTML используют Lorem Ipsum в качестве текста по умолчанию, так что поиск по ключевым словам
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="text-editors">

                <MonacoEditor Id="@_mainClassTextEditorId" Title="Solution" Height="30vh" />
                <MonacoEditor Id="@_testClassTextEditorId" Title="Some tests" Height="30vh" />

            </div>
        </div>

    </div>

    <div class="row">
        <div class="col justify-content-end pt-2 pb-2">
            <button class="btn btn-primary" @onclick="RunTestAsync">Run Tests</button>
        </div>
    </div>

    <div class="row">
        <div class="col">

            <CompilationResult CompiledInformation="_compiledInformation" />

        </div>
    </div>

</div>





@code {

    private const string _mainClassTextEditorId = "main-class-text-edittor";
    private const string _testClassTextEditorId = "test-class-text-edittor";

    private CompiledInformationDto? _compiledInformation;
    private List<PracticeHeadingDto>? _practiceHeadings;


    protected override async Task OnInitializedAsync()
    {
        string requestUri = "api/Practice/GetAllPracticeHeadings";

        _practiceHeadings = await _sender.SendGetAsync<List<PracticeHeadingDto>>(requestUri);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _monaco.InitializeAsync(_mainClassTextEditorId, Constants.MainClassText, "csharp");
            await _monaco.InitializeAsync(_testClassTextEditorId, Constants.TestClassText, "csharp");
        }

        await base.OnAfterRenderAsync(firstRender);

    }

    private async Task RunTestAsync()
    {
        string mainClassText = await _monaco.GetCodeAsync(_mainClassTextEditorId);
        string testClassText = await _monaco.GetCodeAsync(_testClassTextEditorId);

        RunAllTestsRequest request = new()
            {
                MainClassText = mainClassText,
                TestClassText = testClassText
            };

        string requestUri = "api/Compiler/RunAllTests";

        _compiledInformation = await _sender.SendPostAsJsonAsync<CompiledInformationDto>(requestUri, request);
    }
 
}
