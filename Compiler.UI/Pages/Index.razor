@page "/"
@using Compiler.API.Compiler
@using System.Net
@using Compiler.Application.Compiler.RunTests

@inject HttpClient _httpClient

<PageTitle>Index</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-7">
            <div class="text-editor-wrapper">
                <div id="@_mainClassTextEditorId" class="text-editor">
                </div>
            </div>

        </div>

        <div class="col-5">
            <div class="text-editor-wrapper">
                <div id="@_testClassTextEditorId" class="text-editor">
                </div>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col justify-content-end pt-2 pb-2">
            <button class="btn btn-primary" @onclick="RunTest">Run Tests</button>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="compilation-result">
                @if(_compiledInformation != null)
                {
                    if (_compiledInformation.Errors != null && _compiledInformation.Errors.Any())
                    {
                        @foreach(var error in _compiledInformation.Errors)
                        {
                            <div>
                                @error
                            </div>
                        }
                    }
                    if (_compiledInformation.TestResult != null && _compiledInformation.TestResult.Any())
                    {
                        @foreach(var testResult in _compiledInformation.TestResult!)
                        {
                            <div>
                                @testResult
                            </div>
                        }
                    }
                }
            </div>
        </div>
    </div>

</div>





@code {
    [Inject]
    private Monaco Monaco { get; set; } = null!;

    private const string _mainClassTextEditorId = "main-class-text-edittor";
    private const string _testClassTextEditorId = "test-class-text-edittor";

    private CompiledInformationDto? _compiledInformation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Monaco.InitializeAsync(_mainClassTextEditorId, Constants.MainClassText, "csharp");
            await Monaco.InitializeAsync(_testClassTextEditorId, Constants.TestClassText, "csharp");
        }

        await base.OnAfterRenderAsync(firstRender);

    }

    private async Task RunTest()
    {
        _compiledInformation = await SendRunTestAsync();
    }

    private async Task<CompiledInformationDto> SendRunTestAsync()
    {
        string mainClassText = await Monaco.GetCodeAsync(_mainClassTextEditorId);
        string testClassText = await Monaco.GetCodeAsync(_testClassTextEditorId);

        RunAllTestsRequest request = new()
            {
                MainClassText = mainClassText,
                TestClassText = testClassText
            };

        var response = await _httpClient.PostAsJsonAsync("api/Compiler/RunAllTests", request);

        try
        {

            if (response.IsSuccessStatusCode)
            {

                return await response.Content.ReadFromJsonAsync<CompiledInformationDto>() ?? new CompiledInformationDto();
            }
            else
            {
                var message = await response.Content.ReadAsStringAsync();
                throw new Exception($"Http status code: {response.StatusCode} Message: {message}");
            }
        }

        catch (Exception)
        {
            throw;
        }

    }
}
